name: Setup.Nginx.Proxy

on:
  workflow_dispatch:
  repository_dispatch:
    types: [setup-nginx]

jobs:
  setup-nginx:
    name: Configure Nginx on Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Configure Nginx Reverse Proxy
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          echo "‚öôÔ∏è Configuring Nginx reverse proxy..."
          # shellcheck disable=SC2087
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} bash <<EOF
            set -e
            CONTAINER_NAME="next-boilerplate-frontend"
            DOMAIN="nextjs.${{ secrets.DOMAIN_NAME }}"
            APP_PORT=3000
            NGINX_CONF="/etc/nginx/sites-available/app.conf"

            echo "üîç Checking if application container is running..."
            if ! docker ps --filter "name=$CONTAINER_NAME" --filter "status=running" | grep -q "$CONTAINER_NAME"; then
              echo "‚ùå Container '$CONTAINER_NAME' is not running. Aborting Nginx setup."
              exit 1
            fi
            echo "‚úÖ Container '$CONTAINER_NAME' is running."

            echo "üîç Checking if Nginx is installed..."
            if ! command -v nginx &>/dev/null; then
              echo "üì¶ Installing Nginx..."
              if [ -f /etc/debian_version ]; then
                echo "$SERVER_PASSWORD" | sudo -S apt update -y
                echo "$SERVER_PASSWORD" | sudo -S apt install nginx -y
              elif [ -f /etc/redhat-release ]; then
                echo "$SERVER_PASSWORD" | sudo -S yum install epel-release -y
                echo "$SERVER_PASSWORD" | sudo -S yum install nginx -y
              else
                echo "‚ùå Unsupported OS. Please install Nginx manually."
                exit 1
              fi
              echo "$SERVER_PASSWORD" | sudo -S systemctl enable nginx
              echo "$SERVER_PASSWORD" | sudo -S systemctl start nginx
              echo "‚úÖ Nginx installed."
            else
              echo "‚úÖ Nginx already installed."
            fi

            echo "üß± Creating Nginx config for $DOMAIN ..."
            # shellcheck disable=SC2086,SC2029
            cat <<-CONFIG | echo "$SERVER_PASSWORD" | sudo tee $NGINX_CONF > /dev/null
            server {
                listen 80;
                server_name $DOMAIN;

                location / {
                    proxy_pass http://localhost:$APP_PORT;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            CONFIG

            echo "$SERVER_PASSWORD" | sudo -S ln -sf $NGINX_CONF /etc/nginx/sites-enabled/app.conf

            echo "üîÑ Testing Nginx configuration..."
            echo "$SERVER_PASSWORD" | sudo -S nginx -t

            echo "‚ôªÔ∏è Reloading Nginx..."
            echo "$SERVER_PASSWORD" | sudo -S systemctl reload nginx

            echo "‚úÖ Nginx has been configured and reloaded successfully."
            echo "üåê Access your app at: http://$DOMAIN"
          EOF

      - name: Verify Nginx Status
        run: |
          echo "üîé Checking Nginx service status..."
          # shellcheck disable=SC2086,SC2087,SC2029
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} bash <<EOF
            if ! echo "$SERVER_PASSWORD" | sudo -S systemctl is-active --quiet nginx; then
              echo "‚ùå Nginx service is not active!"
              exit 1
            fi
            echo "‚úÖ Nginx service is active."
          EOF
