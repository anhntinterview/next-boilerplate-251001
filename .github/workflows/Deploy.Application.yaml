name: Deploy.Application

on:
  repository_dispatch:
    types: [artifacts-published]

permissions:
  contents: write

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚úÖ Use official SSH action (safer and cleaner than manual setup)
      - name: Setup SSH connection
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      # ‚úÖ Add known hosts (avoids "host authenticity" prompt)
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # ‚úÖ Test SSH connection before proceeding
      - name: Test SSH connection
        run: |
          echo "üîç Testing SSH connection to ${{ secrets.SERVER_HOST }}..."
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo '‚úÖ SSH connection successful.'"

      # ‚úÖ Pull the new Docker image on remote server
      - name: Pull latest Docker image
        env:
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: |
          REF="${{ github.event.client_payload.ref }}"
          TAG="${REF#v}"
          echo "üîÑ Pulling Docker image for version: $TAG"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} bash -s "$TAG" "$CONTAINER_NAME" <<'EOF'
            TAG="$1"
            CONTAINER_NAME="$2"
            echo '${{ secrets.GHCR_TOKEN }}' | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin &&
            docker pull ghcr.io/${{ github.repository_owner }}/$CONTAINER_NAME:$TAG
          EOF

      # ‚úÖ Deploy container (stop old, start new)
      - name: Deploy container
        env:
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: |
          REF="${{ github.event.client_payload.ref }}"
          TAG="${REF#v}"
          echo "üöÄ Deploying version: $TAG"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} bash -s "$TAG" "$CONTAINER_NAME" <<'EOF'
            TAG="$1"
            CONTAINER_NAME="$2"
            echo '${{ secrets.GHCR_TOKEN }}' | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin &&
            set -e
            echo "üõë Stopping old container (if exists)..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            echo "üõë Remove old images (if exists)..."
            docker images | grep $CONTAINER_NAME | awk '{print \$3}' | xargs docker rmi -f >/dev/null 2>&1 || true

            echo "üö¢ Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart=always \
              -p 3000:3000 \
              ghcr.io/${{ github.repository_owner }}/$CONTAINER_NAME:$TAG

            echo "üßπ Cleaning up old images..."
            docker image prune -f
          EOF

      # ‚úÖ Verify the new container is running and healthy
      - name: Verify deployment
        env:
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: |
          echo "‚úÖ Verifying deployment..."
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} bash -s "$CONTAINER_NAME" <<'EOF'
            CONTAINER_NAME="$1"
            docker ps --filter name="$CONTAINER_NAME" --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}'
          EOF
      - name: Setup Nginx Reverse Proxy (if needed)
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: setup-nginx
          client-payload: |
            {
              "ref": "${{ github.event.client_payload.ref }}"
            }
